// This file is generated by pharosnet/dalg, please don't change it by hand.
package dal

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/pharosnet/dalc"
)

type UserCount struct {
	Count sql.NullInt64
}

func (row UserCount) Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		fmt.Fprintf(
			s,
			"UserCount(user_count) { Count(count): %v }",
			row.Count,
		)
	}
}

func userCountScan(rows *sql.Rows) (*UserCount, error) {
	row := &UserCount{}
	err := rows.Scan(&row.Count)
	if err != nil {
		return nil, err
	}
	return row, nil
}

type UserCountQueryCallbackFunc func(ctx context.Context, row *UserCount, rowErr error) (err error)

func userCountArrayMapToInterfacs(rows []*UserCount) []interface{} {
	array := make([]interface{}, len(rows))
	for i, row := range rows {
		array[i] = row
	}
	return array
}

const userCountNormalSQL = `SELECT COUNT("id") FROM "public"."user" LIMIT $1 OFFSET $2`

func UserCountNormal(ctx context.Context, limit int64, offset int64) (result int64, err error) {
	queryFn := func(ctx context.Context, rows *sql.Rows, rowErr error) (err error) {
		if rowErr != nil {
			err = rowErr
			return
		}
		nullResult := sql.NullInt64{}
		if scanErr := rows.Scan(&result); scanErr != nil {
			err = scanErr
			return
		}
		if nullResult.Valid {
			result = nullResult.Int64
		}
		return
	}
	if err = dalc.Query(ctx, userCountNormalSQL, queryFn, limit, offset); err != nil {
		err = fmt.Errorf("query: UserCountNormal failed, %v", err)
	}
	return
}
