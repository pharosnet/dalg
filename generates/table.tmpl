// DO NOT EDIT THIS FILE, IT IS GENERATED BY DALC
package {{ .Package }}

import (
    "context"
    "database/sql"
    "github.com/pharosnet/dalc/v2"
    {{ range $key, $value := .Imports }}"{{ $key }}"{{ end }}
)

const (
    {{ .LowName }}RowGetByPkSQL = "{{ .GetSQL }}"
    {{ .LowName }}RowInsertSQL  = "{{ .InsertSQL }}"
    {{ .LowName }}RowUpdateSQL  = "{{ .UpdateSQL }}"
    {{ .LowName }}RowDeleteSQL  = "{{ .DeleteSQL }}"
)

type {{ .Name }}Row struct { {{ range $key, $field := .Fields}}
    {{ $field.Name }} {{ $field.Type }} {{ $field.Tags }}{{ end }}
}

func (row *{{ .Name }}Row) scanSQLRow(rows *sql.Rows) (err error) {
    err = rows.Scan( {{ range $key, $field := .Fields}}
        &row.{{ $field.Name }},{{ end }}
    )
    return
}

func (row *{{ .Name }}Row) conventToGetArgs() (args *dalc.Args) {

    args = dalc.NewArgs() {{ range $key, $field := .Fields}}
    {{ if eq $field.Pk true }}args.Arg(row.{{ $field.Name }}){{ end }}{{ end }}

    return
}

func (row *{{ .Name }}Row) Get(ctx dalc.PreparedContext) (err error) {
    err = dalc.Query(ctx, {{ .LowName }}RowGetByPkSQL, row.conventToGetArgs(), func(ctx context.Context, rows *sql.Rows, rowErr error) (err error) {
        if rowErr != nil {
            err = rowErr
            return
        }
        err = row.scanSQLRow(rows)
        return
    })
    return
}

func (row *{{ .Name }}Row) conventToInsertArgs() (args *dalc.Args) {

    args = dalc.NewArgs() {{ range $key, $field := .Fields}}
    {{ if eq $field.AutoIncr false }}args.Arg(row.{{ $field.Name }}){{ end }}{{ end }}

    return
}

func (row *{{ .Name }}Row) Insert(ctx dalc.PreparedContext) (err error) {
    {{ if eq .HasAutoIncrId true }}
    insertId, execErr := dalc.ExecuteReturnInsertId(ctx, {{ .LowName }}RowInsertSQL, row.conventToInsertArgs())
    if execErr != nil {
        err = execErr
        return
    }
    row.Id = insertId
    {{ else }}
    _, execErr := dalc.Execute(ctx, {{ .LowName }}RowInsertSQL, row.conventToInsertArgs())
    if execErr != nil {
        err = execErr
        return
    }
    {{ end }}
    return
}

func (row *{{ .Name }}Row) conventToUpdateArgs() (args *dalc.Args) {

    args = dalc.NewArgs() {{ range $key, $field := .Fields}}
    {{ if eq $field.Pk false }}args.Arg(row.{{ $field.Name }}){{ end }}{{ end }}
    {{ range $key, $field := .Fields}}
        {{ if eq $field.Pk true }}args.Arg(row.{{ $field.Name }}){{ end }}{{ end }}
    return
}

func (row *{{ .Name }}Row) Update(ctx dalc.PreparedContext) (err error) {
    _, execErr := dalc.Execute(ctx, {{ .LowName }}RowUpdateSQL, row.conventToUpdateArgs())
    if execErr != nil {
        err = execErr
        return
    }
    return
}

func (row *{{ .Name }}Row) conventToDeleteArgs() (args *dalc.Args) {

    args = dalc.NewArgs() {{ range $key, $field := .Fields}}
    {{ if eq $field.Pk true }}args.Arg(row.{{ $field.Name }}){{ end }}{{ end }}
    return
}

func (row *{{ .Name }}Row) Delete(ctx dalc.PreparedContext) (err error) {
    _, execErr := dalc.Execute(ctx, {{ .LowName }}RowDeleteSQL, row.conventToDeleteArgs())
    if execErr != nil {
        err = execErr
        return
    }
    return
}
